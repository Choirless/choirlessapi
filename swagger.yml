swagger: "2.0"
info:
  description: "Choirless API"
  version: "1.0.0"
  title: "Choirless"
  termsOfService: "https://choirless.com/terms/"
  contact:
    email: "api@choirless.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
basePath: "/"
tags:
- name: "choir"
  description: "Choir-related actions"
- name: "user"
  description: "User-relqted actions"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add/Edit a user"
      description: ""
      operationId: "postUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be added"
        required: true
        schema:
          type: object
          properties:
            userId:
              type: string
            name:
              type: string
            email:
              type: string
            password:
              type: string
            verified:
              type: boolean
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "User not found"
        "409":
          description: "Duplicate user"
    get:
      tags:
      - "user"
      summary: "Get a user"
      description: "Fetch a user by its userId"
      operationId: "getUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: userId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "User not found"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Login with email and password"
      description: ""
      operationId: "postUserLogin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Authentication details"
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            password:
              type: string
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "403":
          description: "Not Authorised"
  /user/choirs:
    get:
      tags:
      - "user"
      summary: "Get the choirs a user belongs to"
      description: "Fetch a user by its userId"
      operationId: "getUserChoirs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: userId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
  /choir:
    get:
      tags:
      - "choir"
      summary: "Fetch a single choir"
      description: ""
      operationId: "getChoir"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "404":
          description: "Not found"
    post:
      tags:
      - "choir"
      summary: "Insert/update a choir"
      description: ""
      operationId: "postChoir"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be added"
        required: true
        schema:
          type: object
          properties:
            choirId:
              type: string
            name:
              type: string
            description:
              type: string
            createdByUserId:
              type: string
            createdByName:
              type: string
            choirType:
              type: string
              enum: [private, public]
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "404":
          description: "Not found"
  /choir/members:
    get:
      tags:
      - "choir"
      summary: "Get the members of a choir"
      description: ""
      operationId: "getChoirMembers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
  /choir/join:
    post:
      tags:
      - "choir"
      summary: "Join a user to a choir"
      description: ""
      operationId: "postChoirJoin"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            choirId:
              type: string
            userId:
              type: string
            name:
              type: string
            memberType:
              type: string
              enum: [leader, member]
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "404":
          description: "Not Found"
  /choir/song:
    post:
      tags:
      - "choir"
      summary: "Add/Edit song"
      description: ""
      operationId: "postChoirSong"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            choirId:
              type: string
            userId:
              type: string
            name:
              type: string
            description:
              type: string
            partNames:
              type: array
              items:
                type: string
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "404":
          description: "Not Found"
    get:
      tags:
      - "choir"
      summary: "Get a song"
      description: ""
      operationId: "getChoirSong"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      - in: query
        type: string
        name: songId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
  /choir/songs:        
    get:
      tags:
      - "choir"
      summary: "Get all songs for a choir"
      description: ""
      operationId: "getChoirSongs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
  /choir/songpart:
    post:
      tags:
      - "choir"
      summary: "Add/Edit song part"
      description: ""
      operationId: "postChoirSongPart"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          properties:
            choirId:
              type: string
            songId:
              type: string
            partId:
              type: string
            partName:
              type: string 
            partType:
              type: string
              enum: [backing, reference, rendition]
            userId:
              type: string
            userName:
              type: string
            offset:
              type: number
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid parameters"
        "404":
          description: "Not Found"
    get:
      tags:
      - "choir"
      summary: "Get a song part"
      description: ""
      operationId: "getChoirSongPart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      - in: query
        type: string
        name: songId
        required: true
      - in: query
        type: string
        name: partId
        required: true  
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
  /choir/songparts:        
    get:
      tags:
      - "choir"
      summary: "Get all song parts for a song"
      description: ""
      operationId: "getChoirSongParts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        type: string
        name: choirId
        required: true
      - in: query
        type: string
        name: songId
        required: true
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
        "404":
          description: "Not found"
components:
  schemas:
    User:
      type: "object"
      properties:
        userId:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"
        createdOn:
          type: "string"
        verified:
          type: "boolean"
        password:
          type: "string"
        salt:
          type: "string"
    ApiResponse:
      type: "object"
      properties:
        ok:
          type: "boolean"
externalDocs:
  description: "Find out more about Choirless"
  url: "https://choirless.com"